/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package redadhoc;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.util.Scanner;

/**
 *
 * @author gaona
 */
public class Avion extends javax.swing.JFrame {

    static Aviones yo = new Aviones(10,400,500);
    /**
     * Creates new form Avion
     */
    public Avion() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 721, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 553, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Avion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Avion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Avion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Avion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Avion().setVisible(true);
            }
        });
        
        
        do{
         if (comunicacion() )
             break;
        }while(true);
        
    }
    
    public static boolean comunicacion(){
        boolean llego=false;
        //Mensaje a pasar
        String torre = "192.168.137.1";
        String txt;
        
        System.out.println("Soy un avion");
        Scanner sc = new Scanner(System.in);
        
        //System.out.println("Introduce posicion x, y, z");
        txt = yo.getX() + " " + yo.getY() + " " + yo.getZ();
        System.out.println("Lo que le envio: "+ txt);
        
        try {
            DatagramSocket socketUDP = new DatagramSocket();
            byte[] mensaje = txt.getBytes();
            InetAddress hostServidor = InetAddress.getByName(torre);
            int puertoServidor = 6789;
            
            InetAddress address = InetAddress.getLocalHost();
            //System.out.println("IP Local :"+address.getHostAddress());
            //System.out.println("IP Local :"+address.getLocalHost());
            
            // Construimos un datagrama para enviar el mensaje al servidor
            DatagramPacket peticion =
            new DatagramPacket(mensaje, txt.length(), hostServidor, puertoServidor);

            // Enviamos el datagrama
            socketUDP.send(peticion);

            // Construimos el DatagramPacket que contendrï¿½ la respuesta
            byte[] bufer = new byte[1000];
            DatagramPacket respuesta =
            new DatagramPacket(bufer, bufer.length);
            socketUDP.receive(respuesta);
            
            // Enviamos la respuesta del servidor a la salida estandar
            System.out.println("Respuesta: " + new String(respuesta.getData()));

            // Cerramos el socket
            socketUDP.close();
            
            if(peticion.equals("Llegaste") ){
                llego=true;
                
            }else {
                System.out.println("Entre al else");
                String[] str = new String(peticion.getData()).split(" ");
                //System.out.println("respuesta" + peticion.getData());
                yo.setX( Float.parseFloat( str[0] ) );
                yo.setY( Float.parseFloat( str[1] ) );
                yo.setZ( Float.parseFloat( str[2] ) );
            }

        } catch (SocketException e) {
            System.out.println("Socket: " + e.getMessage());
        } catch (IOException e) {
            System.out.println("IO: " + e.getMessage());
        }
        
        return llego;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
